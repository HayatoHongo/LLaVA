def train()
def LlavaLlamaForCausalLM.__init__(self, config)
def LlavaLlamaModel.__init__(self, config: LlamaConfig)
def LlavaLlamaForCausalLM.get_model(self)
def initialize_vision_modules(self, model_args, fsdp=None)
def get_vision_tower(self)
def get_vision_tower(self)
def get_vision_tower(self)
def build_vision_tower(vision_tower_cfg, **kwargs)
def CLIPVisionTower.__init__(self, vision_tower, args, delay_load=False)
def CLIPVisionTower.load_model(self)
def CLIPVisionTower.hidden_size(self)
def CLIPVisionTower.config(self)
def build_vision_projector(config, delay_load=False, **kwargs)
def LlavaLlamaForCausalLM.get_model(self)
def get_vision_tower(self)
def LlavaLlamaForCausalLM.get_model(self)
def LlavaLlamaForCausalLM.get_model(self)
def LlavaLlamaForCausalLM.get_model(self)
def LlavaLlamaForCausalLM.get_model(self)
def LlavaLlamaForCausalLM.get_model(self)
def initialize_vision_tokenizer(self, model_args, tokenizer)
def make_supervised_data_module(tokenizer, data_args)
def LazySupervisedDataset.__init__(self, data_path, tokenizer, data_args)
def rank0_print(*args)
def LazySupervisedDataset.__len__(self)
def make_supervised_data_module: result (return)
def LazySupervisedDataset.__len__(self)
def _get_train_sampler(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def create_optimizer(self)
def create_optimizer(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__len__(self)
def LazySupervisedDataset.__getitem__(self, i)
def preprocess_multimodal(sources, data_args)
def preprocess(sources, tokenizer, has_image=False)
def preprocess_plain(sources, tokenizer)
def tokenizer_image_token(prompt, tokenizer, image_token_index=IMAGE_TOKEN_INDEX, return_tensors=None)
def tokenizer_image_token(prompt, tokenizer, image_token_index=IMAGE_TOKEN_INDEX, return_tensors=None)
def LazySupervisedDataset.__getitem__(self, i)
def preprocess_multimodal(sources, data_args)
def preprocess(sources, tokenizer, has_image=False)
def preprocess_plain(sources, tokenizer)
def tokenizer_image_token(prompt, tokenizer, image_token_index=IMAGE_TOKEN_INDEX, return_tensors=None)
def tokenizer_image_token(prompt, tokenizer, image_token_index=IMAGE_TOKEN_INDEX, return_tensors=None)
def DataCollatorForSupervisedDataset.__call__(self, instances)
def LlavaLlamaForCausalLM.forward(self, input_ids, attention_mask, position_ids, past_key_values, inputs_embeds, labels, use_cache, output_attentions, output_hidden_states, images, image_sizes, return_dict)
def LlavaMetaForCausalLM(ABC).prepare_inputs_labels_for_multimodal(self, input_ids, position_ids, attention_mask, past_key_values, labels, images, image_sizes=None)
def LlavaLlamaForCausalLM.get_model(self)
def get_vision_tower(self)
def LlavaMetaForCausalLM(ABC).encode_images(self, images)
def LlavaLlamaForCausalLM.get_model(self)
def get_vision_tower(self)
def CLIPVisionTower.forward(self, images)
def CLIPVisionTower.device(self)
def CLIPVisionTower.dtype(self)
def CLIPVisionTower.feature_select(self, image_forward_outs)
def LlavaLlamaForCausalLM.get_model(self)
def LlavaLlamaForCausalLM.get_model(self)
def LlavaLlamaForCausalLM.get_model(self)
def _save_checkpoint(self, model, trial, metrics=None)
def get_mm_adapter_state_maybe_zero_3(named_params, keys_to_match)
def maybe_zero_3(param, ignore_status=False, name=None)
def maybe_zero_3(param, ignore_status=False, name=None)
def maybe_zero_3(param, ignore_status=False, name=None)
def maybe_zero_3(param, ignore_status=False, name=None)
def safe_save_model_for_hf_trainer(trainer: transformers.Trainer, output_dir: str)
def get_mm_adapter_state_maybe_zero_3(named_params, keys_to_match)
def maybe_zero_3(param, ignore_status=False, name=None)
def maybe_zero_3(param, ignore_status=False, name=None)
def maybe_zero_3(param, ignore_status=False, name=None)
def maybe_zero_3(param, ignore_status=False, name=None)
